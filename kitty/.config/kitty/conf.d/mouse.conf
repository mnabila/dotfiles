#: Mouse {{{

mouse_hide_wait 3.0

#: Hide mouse cursor after the specified number of seconds of the
#: mouse not being used. Set to zero to disable mouse cursor hiding.
#: Set to a negative value to hide the mouse cursor immediately when
#: typing text. Disabled by default on macOS as getting it to work
#: robustly with the ever-changing sea of bugs that is Cocoa is too
#: much effort.

url_color #d79921
url_style curly

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, single, double, curly

open_url_with default

#: The program with which to open URLs that are clicked on. The
#: special value default means to use the operating system's default
#: URL handler.

url_prefixes http https file ftp gemini irc gopher mailto news git

#: The set of URL prefixes to look for when detecting a URL under the
#: mouse cursor.

detect_urls yes

#: Detect URLs under the mouse. Detected URLs are highlighted with an
#: underline and the mouse cursor becomes a hand over them. Even if
#: this option is disabled, URLs are still clickable.

url_excluded_characters 

#: Additional characters to be disallowed from URLs, when detecting
#: URLs under the mouse cursor. By default, all characters legal in
#: URLs are allowed.

copy_on_select no

#: Copy to clipboard or a private buffer on select. With this set to
#: clipboard, simply selecting text with the mouse will cause the text
#: to be copied to clipboard. Useful on platforms such as macOS that
#: do not have the concept of primary selections. You can instead
#: specify a name such as a1 to copy to a private kitty buffer
#: instead. Map a shortcut with the paste_from_buffer action to paste
#: from this private buffer. For example::

#:     map cmd+shift+v paste_from_buffer a1

#: Note that copying to the clipboard is a security risk, as all
#: programs, including websites open in your browser can read the
#: contents of the system clipboard.

strip_trailing_spaces never

#: Remove spaces at the end of lines when copying to clipboard. A
#: value of smart will do it when using normal selections, but not
#: rectangle selections. always will always do it.

select_by_word_characters @-./_~?&=%+#

#: Characters considered part of a word when double clicking. In
#: addition to these characters any character that is marked as an
#: alphanumeric character in the unicode database will be matched.

click_interval -1.0

#: The interval between successive clicks to detect double/triple
#: clicks (in seconds). Negative numbers will use the system default
#: instead, if available, or fallback to 0.5.

focus_follows_mouse no

#: Set the active window to the window under the mouse when moving the
#: mouse around

pointer_shape_when_grabbed arrow

#: The shape of the mouse pointer when the program running in the
#: terminal grabs the mouse. Valid values are: arrow, beam and hand

default_pointer_shape beam

#: The default shape of the mouse pointer. Valid values are: arrow,
#: beam and hand

pointer_shape_when_dragging beam

#: The default shape of the mouse pointer when dragging across text.
#: Valid values are: arrow, beam and hand

#: Mouse actions {{{

#: Mouse buttons can be remapped to perform arbitrary actions. The
#: syntax for doing so is:

#: .. code-block:: none

#:     mouse_map button-name event-type modes action

#: Where ``button-name`` is one of ``left``, ``middle``, ``right`` or
#: ``b1 ... b8`` with added keyboard modifiers, for example:
#: ``ctrl+shift+left`` refers to holding the ctrl+shift keys while
#: clicking with the left mouse button. The number ``b1 ... b8`` can
#: be used to refer to upto eight buttons on a mouse.

#: ``event-type`` is one ``press``, ``release``, ``doublepress``,
#: ``triplepress``, ``click`` and ``doubleclick``.  ``modes``
#: indicates whether the action is performed when the mouse is grabbed
#: by the program running in the terminal, or not. It can have one or
#: more or the values, ``grabbed,ungrabbed``. ``grabbed`` refers to
#: when the program running in the terminal has requested mouse
#: events. Note that the click and double click events have a delay of
#: click_interval to disambiguate from double and triple presses.

#: You can run kitty with the kitty --debug-input command line option
#: to see mouse events. See the builtin actions below to get a sense
#: of what is possible.

#: If you want to unmap an action map it to ``no-op``. For example, to
#: disable opening of URLs with a plain click::

#:     mouse_map left click ungrabbed no-op

#: .. note::
#:     Once a selection is started, releasing the button that started it will
#:     automatically end it and no release event will be dispatched.

clear_all_mouse_actions no

#: You can have kitty remove all mouse actions seen up to this point.
#: Useful, for instance, to remove the default mouse actions.

mouse_map left            click ungrabbed mouse_click_url_or_select
mouse_map shift+left      click grabbed,ungrabbed mouse_click_url_or_select
mouse_map ctrl+shift+left release grabbed,ungrabbed mouse_click_url

#: Variant with ctrl+shift is present because the simple click based
#: version has an unavoidable delay of click_interval, to disambiguate
#: clicks from double clicks.

mouse_map ctrl+shift+left press grabbed discard_event

#: Prevent this press event from being sent to the program that has
#: grabbed the mouse, as the corresponding release event is used to
#: open a URL.

mouse_map middle        release ungrabbed paste_from_selection
mouse_map left          press ungrabbed mouse_selection normal
mouse_map ctrl+alt+left press ungrabbed mouse_selection rectangle
mouse_map left          doublepress ungrabbed mouse_selection word
mouse_map left          triplepress ungrabbed mouse_selection line

#: Select the entire line

mouse_map ctrl+alt+left triplepress ungrabbed mouse_selection line_from_point

#: Select from the clicked point to the end of the line

mouse_map right press ungrabbed mouse_selection extend

#: If you want only the end of the selection to be moved instead of
#: the nearest boundary, use move-end instead of extend.

mouse_map shift+middle        release ungrabbed,grabbed paste_selection
mouse_map shift+left          press ungrabbed,grabbed mouse_selection normal
mouse_map shift+ctrl+alt+left press ungrabbed,grabbed mouse_selection rectangle
mouse_map shift+left          doublepress ungrabbed,grabbed mouse_selection word
mouse_map shift+left          triplepress ungrabbed,grabbed mouse_selection line

#: Select the entire line

mouse_map shift+ctrl+alt+left triplepress ungrabbed,grabbed mouse_selection line_from_point

#: Select from the clicked point to the end of the line

mouse_map shift+right press ungrabbed,grabbed mouse_selection extend
#: }}}

#: }}}
